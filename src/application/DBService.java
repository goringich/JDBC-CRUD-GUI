import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class DBService {
  private final String url = "jdbc:postgresql://localhost:5432/sql-laba5";
  private String username;
  private String password;

  public DBService(String username, String password) {
    System.out.println("üîç –õ–æ–≥–∏–Ω: " + username + " | –ü–∞—Ä–æ–ª—å: " + password); // DEBUG
    this.username = username;
    this.password = password;
  }

  public Connection getConnection() throws SQLException {
    return DriverManager.getConnection(url, username, password);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (—Ö—Ä–∞–Ω–∏–º–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞)
  public void createTable() {
    try (Connection conn = getConnection();
         CallableStatement stmt = conn.prepareCall("{call create_table()}")) {
      stmt.execute();
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
  public void clearTable() {
    try (Connection conn = getConnection();
         CallableStatement stmt = conn.prepareCall("{call clear_table()}")) {
      stmt.execute();
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
  public void addFramework(String name, String type, String description) {
    try (Connection conn = getConnection();
         CallableStatement stmt = conn.prepareCall("{call add_framework(?, ?, ?)}")) {
      stmt.setString(1, name);
      stmt.setString(2, type);
      stmt.setString(3, description);
      stmt.execute();
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  // –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ name
  public List<Framework> searchFramework(String name) {
    List<Framework> list = new ArrayList<>();
    try (Connection conn = getConnection();
         CallableStatement stmt = conn.prepareCall("{? = call search_framework(?)}")) {
      stmt.registerOutParameter(1, Types.OTHER);
      stmt.setString(2, name);
      stmt.execute();
      ResultSet rs = (ResultSet) stmt.getObject(1);
      while (rs.next()) {
        list.add(new Framework(
          rs.getInt("id"),
          rs.getString("name"),
          rs.getString("type"),
          rs.getString("description"),
          rs.getTimestamp("created_at")
        ));
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return list;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
  public void updateFramework(String oldName, String newName, String newType, String newDescription) {
    try (Connection conn = getConnection();
         CallableStatement stmt = conn.prepareCall("{call update_framework(?, ?, ?, ?)}")) {
      stmt.setString(1, oldName);
      stmt.setString(2, newName);
      stmt.setString(3, newType);
      stmt.setString(4, newDescription);
      stmt.execute();
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ name
  public void deleteFramework(String name) {
    try (Connection conn = getConnection();
         CallableStatement stmt = conn.prepareCall("{call delete_framework(?)}")) {
      stmt.setString(1, name);
      stmt.execute();
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
  public List<Framework> getAllFrameworks() {
    List<Framework> list = new ArrayList<>();
    try (Connection conn = getConnection();
         CallableStatement stmt = conn.prepareCall("{? = call get_all_frameworks()}")) {
      stmt.registerOutParameter(1, Types.OTHER);
      stmt.execute();
      ResultSet rs = (ResultSet) stmt.getObject(1);
      while (rs.next()) {
        list.add(new Framework(
          rs.getInt("id"),
          rs.getString("name"),
          rs.getString("type"),
          rs.getString("description"),
          rs.getTimestamp("created_at")
        ));
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return list;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  public void createUser(String newUsername, String newPassword, String role) {
    try (Connection conn = getConnection();
         CallableStatement stmt = conn.prepareCall("{call create_user(?, ?, ?)}")) {
      stmt.setString(1, newUsername);
      stmt.setString(2, newPassword);
      stmt.setString(3, role);
      stmt.execute();
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã
  public void createDatabase() {
    try (Connection conn = getConnection();
         CallableStatement stmt = conn.prepareCall("{call create_database()}")) {
      stmt.execute();
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  public void deleteDatabase() {
    try (Connection conn = getConnection();
         CallableStatement stmt = conn.prepareCall("{call delete_database()}")) {
      stmt.execute();
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }
}
